method = 'rf',
ntree = 200,
trControl = control)
)
library(microbenchmark)
microbenchmark(train(x = cov_tidy_train[-1],
y = cov_tidy_train$Cover_Type,
method = 'rf',
ntree = 200,
trControl = control),
train(x = cov_tidy_train %>%
select(Elevation,
Soil_Type,
Wilderness_Area,
Horizontal_Distance_To_Roadways),
y = cov_tidy_train$Cover_Type,
method = 'rf',
ntree = 200,
trControl = control)
)
?microbenchmark
bench <- microbenchmark(train(x = cov_tidy_train[-1],
y = cov_tidy_train$Cover_Type,
method = 'rf',
ntree = 200,
trControl = control),
train(x = cov_tidy_train %>%
select(Elevation,
Soil_Type,
Wilderness_Area,
Horizontal_Distance_To_Roadways),
y = cov_tidy_train$Cover_Type,
method = 'rf',
ntree = 200,
trControl = control)
)
bench <- microbenchmark(train(x = cov_tidy_train[-1],
y = cov_tidy_train$Cover_Type,
method = 'rf',
ntree = 200,
trControl = control),
train(x = cov_tidy_train %>%
select(Elevation,
Soil_Type,
Wilderness_Area,
Horizontal_Distance_To_Roadways),
y = cov_tidy_train$Cover_Type,
method = 'rf',
ntree = 200,
trControl = control),
times = 3L
)
bench
mod_rf
set.seed(1808)
# create 10 folds for cross-validation for accurate comparison across models
folds <- createFolds(y = cov_tidy_train$Cover_Type,
k = 3,
returnTrain = TRUE)
control <- trainControl(method = 'cv',
index = folds,
verboseIter = TRUE)
set.seed(1808)
mod_rf <- train(x = cov_tidy_train %>%
select(Elevation,
Soil_Type,
Wilderness_Area,
Horizontal_Distance_To_Roadways),
y = cov_tidy_train$Cover_Type,
method = 'rf',
ntree = 200,
trControl = control)
mod_rf
mean(predict(mod_rf, cov_tidy_test) == cov_tidy_test$Cover_Type)
cov %>%
group_by(Cover_Type) %>%
summarise(n = n())
cov %>%
mutate(Cover_Type = str_replace_all(Cover_Type,
c(`1` = 'Spruce/Fir',
`2` = 'Lodgepole Pine',
`3` = 'Ponderosa Pine',
`4` = 'Cottonwood/Willow',
`5` = 'Aspen',
`6` = 'Douglas Fir',
`7` = 'Krummholz'))) %>%
group_by(Cover_Type) %>%
summarise(n = n())
cov %>%
mutate(Cover_Type = str_replace_all(Cover_Type,
c(`1` = 'Spruce/Fir',
`2` = 'Lodgepole Pine',
`3` = 'Ponderosa Pine',
`4` = 'Cottonwood/Willow',
`5` = 'Aspen',
`6` = 'Douglas Fir',
`7` = 'Krummholz')),
Cover_Type = as.factor(Cover_Type)) %>%
group_by(Cover_Type) %>%
summarise(n = n()) %>%
arrange(desc(n))
cov %>%
mutate(Cover_Type = str_replace_all(Cover_Type,
c(`1` = 'Spruce/Fir',
`2` = 'Lodgepole Pine',
`3` = 'Ponderosa Pine',
`4` = 'Cottonwood/Willow',
`5` = 'Aspen',
`6` = 'Douglas Fir',
`7` = 'Krummholz')),
Cover_Type = as.factor(Cover_Type)) %>%
group_by(Cover_Type) %>%
summarise(n = n()) %>%
arrange(desc(n))
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
rnorm(1)
rnorm(1)
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy))
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy))
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy))
vars
set.seed(1808)
vars <- randomForest::randomForest(Cover_Type ~ ., data = cov_tidy,
importance = TRUE)
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy))
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy)) %>%
ggplot(aes(x = MeanDecreaseAccuracy)) +
geom_bar()
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy))
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy)) %>%
ggplot(aes(x = MeanDecreaseAccuracy)) +
geom_col()
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy)) %>%
ggplot(aes(x = MeanDecreaseAccuracy)) +
geom_bar()
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy)) %>%
ggplot(aes(x = Variable, y = MeanDecreaseAccuracy)) +
geom_col()
?order
?reorder
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
ggplot(aes(x = reorder(Variable, MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_col() +
geom_xline()
?geom_yline
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
ggplot(aes(x = reorder(Variable, MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
ggplot(aes(x = reorder(Variable, rev(MeanDecreaseAccuracy)), y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
ggplot(aes(x = rev(reorder(Variable, MeanDecreaseAccuracy)), y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
ggplot(aes(x = reorder(Variable, MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy)) %>%
ggplot(aes(x = reorder(Variable, MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy)) %>%
ggplot(aes(x = Variable, y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy))
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy)) %>%
ggplot(aes(x = reorder(Variable, arrange(desc(MeanDecreaseAccuracy))),
y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
?geom_bar
?reorder
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(desc(MeanDecreaseAccuracy)) %>%
ggplot(aes(x = reorder(Variable, MeanDecreaseAccuracy),
y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(MeanDecreaseAccuracy) %>%
ggplot(aes(x = reorder(Variable, MeanDecreaseAccuracy),
y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
arrange(MeanDecreaseAccuracy) %>%
ggplot(aes(x = fct_reorder(Variable, MeanDecreaseAccuracy),
y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
mutate(Variable = factor(Variable)) %>%
ggplot(aes(x = fct_reorder(Variable, MeanDecreaseAccuracy),
y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
mutate(Variable = factor(Variable)) %>%
ggplot(aes(x = fct_reorder(Variable, MeanDecreaseAccuracy, .desc = TRUE),
y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red')
?fct_reorder
?theme
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
mutate(Variable = factor(Variable)) %>%
ggplot(aes(x = fct_reorder(Variable, MeanDecreaseAccuracy, .desc = TRUE),
y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red') +
labs(x = 'Variable', y = 'Mean Decrease in Accuracy') +
theme_minimal() +
theme(panel.grid.major.x = element_blank())
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
mutate(Variable = factor(Variable)) %>%
ggplot(aes(x = fct_reorder(Variable, MeanDecreaseAccuracy, .desc = TRUE),
y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red') +
labs(x = 'Variable', y = 'Mean Decrease in Accuracy') +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(angle = 45,
hjust = 1))
unlink('covType_cache', recursive = TRUE)
set.seed(1808)
vars <- randomForest::randomForest(Cover_Type ~ ., data = cov_tidy,
importance = TRUE)
unlink('covType_cache', recursive = TRUE)
?ggpairs
ggpairs(cov_tidy, columns = 4:13, cardinality_threshold = 37) +
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type)) +
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type)) +
scale_colour_manual(palette = palette) +
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
?theme
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type)) +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
?ggpairs
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type),
lower = alpha = 0.1) +
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type),
lower = list(alpha = 0.1)) +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type),
lower = list(wrap(continuous = 'points', alpha = 0.1))) +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type),
lower = list(continuous = wrap('points', alpha = 0.1))) +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type),
diag = list(continuous = wrap('densityDiag', alpha = 0.1)),
lower = list(continuous = wrap('points', alpha = 0.1))) +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type),
diag = list(continuous = wrap('densityDiag', alpha = 0.5)),
lower = list(continuous = wrap('points', alpha = 0.1))) +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
?wrap
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type),
diag = list(continuous = wrap('densityDiag',
alpha = 0.5,
mapping = aes(colour = Cover_Type))),
lower = list(continuous = wrap('points', alpha = 0.1))) +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
ggpairs(cov_tidy, columns = 4:13,
diag = list(continuous = wrap('densityDiag',
alpha = 0.5,
mapping = aes(colour = Cover_Type))),
lower = list(continuous = wrap('points', alpha = 0.1))) +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
ggpairs(cov_tidy, columns = 4:13,
diag = list(continuous = wrap('densityDiag',
alpha = 0.5)),
lower = list(continuous = wrap('points',
alpha = 0.1,
mapping = aes(colour = Cover_Type)))) +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type),
diag = list(continuous = wrap('densityDiag',
alpha = 0.5)),
lower = list(continuous = wrap('points',
alpha = 0.1))) +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
ggpairs(cov_tidy, columns = 4:13, aes(colour = Cover_Type),
diag = list(continuous = wrap('densityDiag',
alpha = 0.5)),
lower = list(continuous = wrap('points',
alpha = 0.1))) +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed",
colour = "black",
fill = NA))
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
mutate(Variable = factor(Variable)) %>%
ggplot(aes(x = fct_reorder(Variable, MeanDecreaseAccuracy, .desc = TRUE),
y = MeanDecreaseAccuracy)) +
geom_col() +
geom_hline(yintercept = 0.10, colour = 'red') +
labs(x = 'Variable', y = 'Mean Decrease in Accuracy') +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(angle = 45,
hjust = 1))
vars$importance %>%
as_tibble(rownames = 'Variable') %>%
mutate(Variable = factor(Variable))
# basic summary statistics
skim(cov)
mod_knn
set.seed(1808)
mod_low_k
set.seed(1)
rnorm(1)
rnorm(1)
set.seed(1)
rnorm(1)
mod_low_k
mod_knn
mod_knn
mod_knn$results
?geom_line
mod_knn$results %>%
ggplot(aes(x = k, y = Accuracy)) +
geom_line(linetype = 3)
mod_knn$results %>%
ggplot(aes(x = k, y = Accuracy)) +
geom_line(linetype = 4)
mod_knn$results %>%
ggplot(aes(x = k, y = Accuracy)) +
geom_line(linetype = 5)
mod_knn$results %>%
ggplot(aes(x = k, y = Accuracy)) +
geom_line(linetype = 1)
mod_knn
unlink('covType_cache', recursive = TRUE)
mod_knn
mean(predict(mod_knn, cov_tidy_test) == cov_tidy_test$Cover_Type)
mod_base
mean(predict(mod_base, cov_tidy_test) == cov_tidy_test$Cover_Type)
mod_rf
mean(predict(mod_rf, cov_tidy_test) == cov_tidy_test$Cover_Type)
mod_base
mean(predict(mod_base, cov_tidy_test) == cov_tidy_test$Cover_Type)
rm(mod_test, bench)
